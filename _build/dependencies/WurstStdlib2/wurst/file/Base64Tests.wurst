package Base64Tests

import Base64
import Bitwise
import ChunkedString

@Test
function base64EncoderBigChunksTest()
    let encoder = new Base64Encoder(128)

    // Hell
    encoder..writeByte(0x48)
    ..writeByte(0x65)
    ..writeByte(0x6c)
    ..writeByte(0x6c)
    // o, w
    encoder..writeByte(0x6f)
    ..writeByte(0x2c)
    ..writeByte(0x20)
    ..writeByte(0x77)
    // orld
    encoder..writeByte(0x6f)
    ..writeByte(0x72)
    ..writeByte(0x6c)
    ..writeByte(0x64)
    // !
    encoder.writeByte(0x21)

    let data = encoder.intoData()
    data.getUnsafeString().assertEquals("SGVsbG8sIHdvcmxkIQ==")
    destroy data

@Test
function base64EncoderSmallChunksTest()
    let encoder = new Base64Encoder(16)
    ..writeInt(byte4(0x48, 0x65, 0x6c, 0x6c).toInt())
    ..writeInt(byte4(0x6f, 0x2c, 0x20, 0x77).toInt())
    ..writeInt(byte4(0x6f, 0x72, 0x6c, 0x64).toInt())
    ..writeInt(byte4(0x21, 0x20, 0x20, 0x20).toInt())    

    let data = encoder.intoData()
    var str = ""
    while data.hasChunk()
        str += data.readChunk()
    destroy data
    str.assertEquals("SGVsbG8sIHdvcmxkISAgIA==")

@Test
function base64DecoderTest()
    let decoder = new Base64Decoder()..append("SGVsbG8sIHdvcmxkIQ==")

    let data = decoder.intoData()
    data.readByte().assertEquals(0x48)
    data.readByte().assertEquals(0x65)
    data.readByte().assertEquals(0x6c)
    data.readByte().assertEquals(0x6c)
    data.readByte().assertEquals(0x6f)
    data.readByte().assertEquals(0x2c)
    data.readByte().assertEquals(0x20)
    data.readByte().assertEquals(0x77)
    data.readByte().assertEquals(0x6f)
    data.readByte().assertEquals(0x72)
    data.readByte().assertEquals(0x6c)
    data.readByte().assertEquals(0x64)
    data.readByte().assertEquals(0x21)
    destroy data

@Test
function base64NegativeIntegersTest()
    let encoder = new Base64Encoder(16)
    ..writeInt(-1000)
    ..writeInt(1000)
    ..writeShort(1000)

    let data = new Base64Decoder()..consume(encoder.intoData()).intoData()
    data.readInt().assertEquals(-1000)
    data.readInt().assertEquals(1000)
    data.readShort().assertEquals(1000)
    destroy data

constant bytes = [0xb3, 0xfb, 0xc6, 0xec, 0x89, 0xf9, 0x25, 0x22, 0x4a, 0xe0, 0x99, 0x08, 0x5d, 0x1a, 0x93, 0xef,
    0xc6, 0x47, 0x38, 0xe3, 0xbe, 0x91, 0x17, 0xe6, 0x25, 0xcd, 0x2f, 0xfe, 0x33, 0xbd, 0xed, 0x00,
    0x8e, 0xb9, 0x89, 0xff, 0xb2, 0x47, 0x10, 0xe6, 0x34, 0x71, 0x91, 0x92, 0x6e, 0xd8, 0xf3, 0x0d,
    0x24, 0xa6, 0x4d, 0xd3, 0x34, 0xe4, 0xca, 0x53, 0x6a, 0x9c, 0x39, 0x0b, 0x91, 0x39, 0x05, 0xc8,
    0xf3, 0xe6, 0xa1, 0x8f, 0x64, 0x56, 0xa0, 0x43, 0xb8, 0x5a, 0x06, 0x04, 0xa7, 0xd5, 0x82, 0x85,
    0x33, 0x88, 0xbf, 0xd5, 0x8a, 0x16, 0xdc, 0xb0, 0xfa, 0x64, 0x8a, 0xd8, 0xbd, 0x4c, 0x77, 0x69,
    0xe0, 0x43, 0x23, 0xc1, 0xac, 0x97, 0x24, 0x92, 0xe5, 0x4d, 0xf3, 0x8d, 0xc3, 0x36, 0xe6, 0x1e,
    0xbe, 0x5b, 0x25, 0x48, 0xd8, 0x77, 0xeb, 0x46, 0xef, 0x56, 0xbb, 0x43, 0xd0, 0xba, 0xe9, 0xed,
    0x49, 0x8b, 0xa2, 0x62, 0x3b, 0x3c, 0xb7, 0xc5, 0xba, 0x53, 0x49, 0x38, 0x77, 0x21, 0x4a, 0x12,
    0x5a, 0x61, 0xb3, 0x4c, 0x06, 0xef, 0xfe, 0x66, 0x4a, 0x74, 0xb0, 0xb9, 0x95, 0xf6, 0xd4, 0x03,
    0xd3, 0x24, 0xf2, 0x70, 0x48, 0x05, 0xef, 0x16, 0x21, 0xac, 0x25, 0xdf, 0x2c, 0x40, 0xe7, 0x2a,
    0x7b, 0x36, 0xc9, 0xea, 0xeb, 0xd0, 0xe1, 0x63, 0xb6, 0x21, 0x10, 0xa4, 0x03, 0x27, 0xe6, 0xa7,
    0xa8, 0x86, 0x16, 0x2b, 0x77, 0xba, 0x4a, 0xc1, 0x5a, 0xd2, 0xb1, 0xdc, 0xc3, 0x2f, 0xf2, 0xff,
    0xca, 0x57, 0xe3, 0xa5, 0xe6, 0xd5, 0x05, 0x64, 0xc2, 0xf6, 0x91, 0x35, 0x4a, 0x1b, 0x80, 0x46,
    0xac, 0x17, 0xfc, 0x84, 0x16, 0xe2, 0xdd, 0x07, 0xb2, 0xfa, 0x61, 0xc8, 0xd5, 0xda, 0x92, 0xfb,
    0xb3, 0xf5, 0xa9, 0x85, 0x0d, 0x13, 0xc9, 0xaf, 0x03, 0xe7, 0x71, 0x1d, 0xf5, 0x04, 0x88, 0xbf,
    0xe7, 0xa2, 0xea, 0xbe, 0x18, 0x3c, 0x22, 0x6f, 0x66, 0x9a, 0xca, 0x1c, 0xae, 0x55, 0xb7, 0xf2,
    0xb3, 0xcc, 0xa1, 0xe1, 0x5d, 0xba, 0x27, 0xc8, 0xfa, 0x75, 0x4b, 0xd8, 0xd0, 0xa2, 0xe1, 0x14,
    0x7e, 0xbb, 0x4f, 0xa5, 0xe3, 0x78, 0x5e, 0x06, 0xcd, 0xce, 0xbb, 0xc6, 0x0e, 0xa1, 0xce, 0xcf,
    0x66, 0xcc, 0x7f, 0x83, 0x03, 0xf6, 0xfd, 0xe0, 0xe0, 0xe0, 0xab, 0xaa, 0x95, 0x8e, 0x16, 0x2c,
    0x82, 0x50, 0x42, 0x70, 0x24, 0xac, 0x7d, 0x73, 0x97, 0x64, 0x8f, 0x31, 0x6d, 0x02, 0xb9, 0x45,
    0x65, 0x85, 0xa0, 0x84, 0xf2, 0x72, 0x95, 0xa5, 0xca, 0x36, 0x11, 0xff, 0xda, 0xcf, 0x05, 0x59,
    0x85, 0xa1, 0x2f, 0x5e, 0xad, 0x42, 0xb7, 0x7e, 0xa1, 0x25, 0xd1, 0x90, 0x71, 0x5f, 0x2c, 0x15,
    0x9f, 0xa6, 0xf4, 0xa5, 0x79, 0x98, 0xba, 0x4a, 0x32, 0xcf, 0xeb, 0xa0, 0x18, 0xd8, 0x9b, 0x17,
    0x9b, 0x25, 0x7d, 0xf2, 0x94, 0xee, 0x6f, 0xc7, 0x96, 0x02, 0xe7, 0x2b, 0xaa, 0xd5, 0x35, 0x68,
    0x95, 0x7e, 0x88, 0xea, 0xff, 0xba, 0x58, 0x9c, 0xba, 0x46, 0xc5, 0x41, 0xf7, 0x3b, 0xe2, 0x12,
    0x38, 0x3e, 0x08, 0xef, 0x8c, 0xce, 0x7e, 0xd1, 0x05, 0xba, 0x51, 0x7e, 0xb5, 0xf3, 0xbb, 0xcb,
    0xd3, 0x3b, 0x08, 0x64, 0x5f, 0xea, 0x78, 0xb7, 0x5c, 0xb4, 0x77, 0x95, 0x96, 0xb4, 0x27, 0x80,
    0x1d, 0x5d, 0x1b, 0x75, 0x2a, 0xb4, 0x8f, 0xc2, 0x8c, 0x64, 0x83, 0xde, 0xa6, 0x15, 0x45, 0x3e,
    0xff, 0xe2, 0x45, 0x68, 0x5a, 0x7f, 0x85, 0x3b, 0x30, 0x90, 0xbc, 0xe5, 0x88, 0xb5, 0x76, 0xd4,
    0xe2, 0x7d, 0xf9, 0x7e, 0xfe, 0xd1, 0x5d, 0xa0, 0x69, 0x5b, 0x39, 0x32, 0x00, 0x92, 0x8e, 0x84,
    0x30, 0x1e, 0x27, 0x9f, 0x8a, 0x6d, 0xb8, 0x67, 0x07, 0x27, 0x2c, 0x66, 0xec, 0x26, 0xe0, 0x31,
    0xe7, 0x43, 0xe6, 0xeb, 0x25, 0xdd, 0xd2, 0x11, 0x81, 0x26, 0xeb, 0xd2, 0x84, 0xd5, 0xb5, 0x9b,
    0x4e, 0x10, 0x69, 0x63, 0x19, 0x5b, 0x0f, 0xc2, 0xed, 0xf9, 0x4c, 0xb3, 0xa3, 0xb6, 0x04, 0xdf,
    0xce, 0xfa, 0x55, 0xd5, 0xd3, 0x0d, 0xde, 0x3a, 0x85, 0x6c, 0xe0, 0xa3, 0x2b, 0x41, 0xac, 0x7c,
    0x7d, 0xf9, 0x71, 0xaa, 0x54, 0x63, 0x2a, 0x12, 0x44, 0x44, 0x6d, 0x49, 0xbb, 0xba, 0xc3, 0x47,
    0xef, 0xa7, 0xb6, 0x0a, 0x6d, 0x4f, 0x70, 0x33, 0x73, 0xe8, 0x05, 0xcd, 0x04, 0xbf, 0x6e, 0x85,
    0x72, 0x09, 0x0a, 0x94, 0xcb, 0x70, 0x10, 0x7a, 0x0b, 0x50, 0x38, 0xd7, 0x04, 0x59, 0x86, 0x17,
    0xd3, 0x0b, 0x45, 0x47, 0xcd, 0x9f, 0x5e, 0x5e, 0x43, 0x04, 0x12, 0x6f, 0xec, 0x98, 0x3c, 0xe5,
    0xa6, 0xdf, 0xf1, 0xff, 0x84, 0x79, 0xb3, 0x26, 0xf7, 0xd4, 0x7a, 0x86, 0x8b, 0x03, 0x23, 0xf9,
    0x8c, 0x24, 0x4c, 0xc2, 0x15, 0x09, 0x6f, 0x84, 0xbc, 0x20, 0xc1, 0x4c, 0x60, 0x0a, 0x30, 0x12,
    0x0e, 0x74, 0x03, 0xe4, 0x7e, 0xf0, 0x2e, 0xe3, 0xd0, 0x7b, 0xeb, 0x68, 0xc4, 0x44, 0xff, 0x5e,
    0xd7, 0xfb, 0xf5, 0xf3, 0xf4, 0x7f, 0x2f, 0xc6, 0x1c, 0x30, 0xe0, 0x5e, 0x48, 0x20, 0x90, 0x45,
    0x84, 0x57, 0x18, 0xb3, 0x52, 0x2d, 0x1a, 0x9b, 0x41, 0xdc, 0x62, 0x60, 0x6a, 0xb5, 0x85, 0x95,
    0xc3, 0x89, 0xe8, 0x5d, 0x11, 0x29, 0xfd, 0x60, 0x22, 0xf6, 0x34, 0x52, 0xdc, 0x6e, 0xe1, 0x70,
    0xc8, 0x92, 0x06, 0xa4, 0x31, 0x1e, 0xfd, 0x24, 0x42, 0x5f, 0x2e, 0x60, 0xd3, 0x95, 0x6d, 0x3c,
    0x36, 0x5b, 0x6d, 0xba, 0x54, 0x33, 0xba, 0xe4, 0x2b, 0x6c, 0x9d, 0x23, 0x66, 0xfe, 0x01, 0xf2,
    0x64, 0xeb, 0xb8, 0xcf, 0xfb, 0x19, 0xc6, 0x89, 0x43, 0x42, 0x19, 0x9f, 0x13, 0xeb, 0x9a, 0xa4,
    0xcd, 0xc4, 0xbb, 0xa6, 0x9d, 0x4e, 0x08, 0xe5, 0x47, 0x06, 0x5e, 0xd5, 0xca, 0xae, 0x67, 0xa8,
    0xb3, 0x28, 0xd6, 0x6b, 0x63, 0x8a, 0x17, 0x94, 0x38, 0x8e, 0x8a, 0x0c, 0x5b, 0x51, 0xe8, 0x2d,
    0x49, 0x71, 0xfd, 0xcf, 0xbe, 0x4f, 0x3f, 0x76, 0xae, 0x5f, 0xdd, 0x21, 0x2f, 0x07, 0x79, 0xd4,
    0xc3, 0x19, 0x02, 0x3b, 0xe6, 0xe4, 0xd5, 0x3d, 0x4c, 0xb1, 0xf5, 0x6a, 0x0f, 0x71, 0xba, 0x86,
    0x57, 0x84, 0xe8, 0x6e, 0xbd, 0xbd, 0x91, 0xaa, 0xaf, 0x09, 0xdb, 0x79, 0x2d, 0x09, 0x2d, 0xa3,
    0xb2, 0xe7, 0x5d, 0x16, 0xbf, 0x9b, 0x8c, 0x78, 0xde, 0xdf, 0x37, 0x73, 0x50, 0xdc, 0x79, 0x5c,
    0xd7, 0xc3, 0x94, 0x18, 0x43, 0x88, 0x51, 0xec, 0xe2, 0xfc, 0xd7, 0xc9, 0xe9, 0xc3, 0x56, 0xb3,
    0x1f, 0xb5, 0x73, 0x20, 0x55, 0x5a, 0xad, 0xf2, 0xc7, 0x5c, 0x44, 0x42, 0x51, 0x28, 0xcf, 0x8c,
    0x63, 0x07, 0xdf, 0xd9, 0x89, 0x09, 0xa4, 0xbc, 0x62, 0x08, 0x7f, 0x2d, 0x2a, 0xfb, 0xb6, 0x21,
    0x12, 0x20, 0x9a, 0x60, 0xf3, 0x90, 0x7a, 0x41, 0x99, 0x48, 0xf2, 0x2a, 0x08, 0x87, 0x30, 0xef,
    0xea, 0x07, 0xd8, 0xab, 0xb0, 0xbb, 0xd9, 0x05, 0x1f, 0xff, 0xb6, 0x6b, 0xfe, 0x14, 0x36, 0xb2,
    0x58, 0x92, 0xe6, 0x4f, 0x3f, 0xa1, 0xa9, 0x7b, 0x0e, 0x6c, 0x62, 0xe5, 0xf2, 0xf3, 0x29, 0x0f,
    0x75, 0x07, 0x96, 0xa2, 0x11, 0x96, 0xca, 0xb8, 0x4a, 0x69, 0x51, 0x00, 0x1c, 0x4b, 0x9c, 0x53,
    0x2a, 0x45, 0xee, 0x90, 0x28, 0x1a, 0x0f, 0x0a, 0xfc, 0xc5, 0xfa, 0x38, 0xf7, 0xb9, 0xa3, 0xd5,
    0x1e, 0xf7, 0x51, 0x7b, 0x4f, 0xe8, 0x92, 0x85, 0x8f, 0x11, 0xa6, 0x53, 0x57, 0xf4, 0x5c, 0xe5,
    0xc2, 0xa7, 0x9c, 0x56, 0x5b, 0xf6, 0x4e, 0x97, 0x97, 0x36, 0x0b, 0xd5, 0xbe, 0x89, 0x65, 0x05]

constant chunks = ["s/vG7In5JSJK4JkIXRqT78ZHOOO+kRfmJc0v/jO97QCOuYn/skcQ5jRxkZJu2PMNJKZN0zTkylNqnDkLkTkFyPPmoY9kVqBDuFoG",
    "BKfVgoUziL/VihbcsPpkiti9THdp4EMjwayXJJLlTfONwzbmHr5bJUjYd+tG71a7Q9C66e1Ji6JiOzy3xbpTSTh3IUoSWmGzTAbv",
    "/mZKdLC5lfbUA9Mk8nBIBe8WIawl3yxA5yp7Nsnq69DhY7YhEKQDJ+anqIYWK3e6SsFa0rHcwy/y/8pX46Xm1QVkwvaRNUobgEas",
    "F/yEFuLdB7L6YcjV2pL7s/WphQ0Tya8D53Ed9QSIv+ei6r4YPCJvZprKHK5Vt/KzzKHhXbonyPp1S9jQouEUfrtPpeN4XgbNzrvG",
    "DqHOz2bMf4MD9v3g4OCrqpWOFiyCUEJwJKx9c5dkjzFtArlFZYWghPJylaXKNhH/2s8FWYWhL16tQrd+oSXRkHFfLBWfpvSleZi6",
    "SjLP66AY2JsXmyV98pTub8eWAucrqtU1aJV+iOr/ulicukbFQfc74hI4PgjvjM5+0QW6UX6187vL0zsIZF/qeLdctHeVlrQngB1d",
    "G3UqtI/CjGSD3qYVRT7/4kVoWn+FOzCQvOWItXbU4n35fv7RXaBpWzkyAJKOhDAeJ5+KbbhnBycsZuwm4DHnQ+brJd3SEYEm69KE",
    "1bWbThBpYxlbD8Lt+Uyzo7YE3876VdXTDd46hWzgoytBrHx9+XGqVGMqEkREbUm7usNH76e2Cm1PcDNz6AXNBL9uhXIJCpTLcBB6",
    "C1A41wRZhhfTC0VHzZ9eXkMEEm/smDzlpt/x/4R5syb31HqGiwMj+YwkTMIVCW+EvCDBTGAKMBIOdAPkfvAu49B762jERP9e1/v1",
    "8/R/L8YcMOBeSCCQRYRXGLNSLRqbQdxiYGq1hZXDiehdESn9YCL2NFLcbuFwyJIGpDEe/SRCXy5g05VtPDZbbbpUM7rkK2ydI2b+",
    "AfJk67jP+xnGiUNCGZ8T65qkzcS7pp1OCOVHBl7Vyq5nqLMo1mtjiheUOI6KDFtR6C1Jcf3Pvk8/dq5f3SEvB3nUwxkCO+bk1T1M",
    "sfVqD3G6hleE6G69vZGqrwnbeS0JLaOy510Wv5uMeN7fN3NQ3Hlc18OUGEOIUezi/NfJ6cNWsx+1cyBVWq3yx1xEQlEoz4xjB9/Z",
    "iQmkvGIIfy0q+7YhEiCaYPOQekGZSPIqCIcw7+oH2Kuwu9kFH/+2a/4UNrJYkuZPP6Gpew5sYuXy8ykPdQeWohGWyrhKaVEAHEuc",
    "UypF7pAoGg8K/MX6OPe5o9Ue91F7T+iShY8RplNX9FzlwqecVlv2TpeXNgvVvollBQ=="]

@Test
function base64EncoderStressTest()
    let encoder = new Base64Encoder()
    for i = 0 to bytes.length - 1
        encoder.writeByte(bytes[i])
    let data = encoder.intoData()

    var actual = "" // the test string is less than the limit
    while data.hasChunk()
        actual += data.readChunk()
    destroy data

    var expected = ""
    for i = 0 to chunks.length - 1
        expected += chunks[i]

    actual.assertEquals(expected)

@Test
function base64DecoderStressTest()
    let decoder = new Base64Decoder()
    for i = 0 to chunks.length - 1
        decoder.append(chunks[i])
    let data = decoder.intoData()

    data.size().assertEquals(bytes.length)
    for i = 0 to data.size() - 1
        data.getByte(i).assertEquals(bytes[i])
    destroy data
