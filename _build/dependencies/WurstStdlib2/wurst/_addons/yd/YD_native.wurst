package YD_native
import NoWurst
import Annotations
import StdLibConfig
//——————————————————————native——————————————————————
/** 获取-单位技能 */
@ifNotDefined public native EXGetUnitAbility        (unit u, int abilcode) returns ability
/** 按索引获取-单位技能 */
@ifNotDefined public native EXGetUnitAbilityByIndex (unit u, int index) returns ability
/** 获取-技能 ID */
@ifNotDefined public native EXGetAbilityId          (ability abil) returns int
/** 获取-技能状态 */
@ifNotDefined public native EXGetAbilityState       (ability abil, int state_type) returns real
/** 设置-技能状态 */
@ifNotDefined public native EXSetAbilityState       (ability abil, int state_type, real value) returns bool
/** data_type=class YD_Ability 获取-技能的Real类型 字段数据 */
@ifNotDefined public native EXGetAbilityDataReal    (ability abil, int level, int data_type) returns real
/** data_type=class YD_Ability 设置-技能的Real类型 字段数据 */
@ifNotDefined public native EXSetAbilityDataReal    (ability abil, int level, int data_type, real value) returns bool
/** data_type=class YD_Ability 获取-技能的Integer类型 字段数据*/
@ifNotDefined public native EXGetAbilityDataInteger (ability abil, int level, int data_type) returns int
/** data_type=class YD_Ability 设置-技能的Integer类型 字段数据*/
@ifNotDefined public native EXSetAbilityDataInteger (ability abil, int level, int data_type, int value) returns bool
/** data_type=class YD_Ability 获取-技能的string类型 字段数据*/
@ifNotDefined public native EXGetAbilityDataString  (ability abil, int level, int data_type) returns string
/** data_type=class YD_Ability 设置-技能的string类型 字段数据 */
@ifNotDefined public native EXSetAbilityDataString  (ability abil, int level, int data_type, string value) returns bool
/**设置单位面向角度*/
@ifNotDefined public native EXSetUnitFacing        (unit u, real angle)
/**暂停单位*/
@ifNotDefined public native EXPauseUnit            (unit u, boolean flag)
/**设置单位的碰撞类型*/
@ifNotDefined public native EXSetUnitCollisionType (boolean enable, unit u, integer t)
/**设置单位的移动类型*/
@ifNotDefined public native EXSetUnitMoveType      (unit u, integer t)
/**聊天-设置频道并显示聊天信息*/
@ifNotDefined public native EXDisplayChat (player p, int chat_recipient, string message)
/**执行脚本代码*/
@ifNotDefined public native EXExecuteScript (string script) returns string
/**获取伤害事件数据*/
@ifNotDefined public native EXGetEventDamageData (int edd_type) returns int
/**改变伤害事件造成的伤害*/
@ifNotDefined public native EXSetEventDamage     (real amount) returns bool

/**获取物品数据 物品ID:${itemcode} 获取项(1-5对应图标/提示/提示拓展/名字/说明):${data_type}
*/
@ifNotDefined public native EXGetItemDataString(int itemcode, int data_type) returns string

/**设置物品字符串数据 物品ID:${itemcode}修改项(1-5对应图标/提示/提示拓展/名字/说明)*/
@ifNotDefined public native EXSetItemDataString(int itemcode, int data_type, string value) returns bool

/**获取特效的坐标X值*/
@ifNotDefined public native EXGetEffectX       (effect e) returns real
/**获取特效的坐标Y值*/
@ifNotDefined public native EXGetEffectY       (effect e) returns real
/**获取特效的坐标Z值*/
@ifNotDefined public native EXGetEffectZ       (effect e) returns real
/**设置特效的坐标XY值*/
@ifNotDefined public native EXSetEffectXY      (effect e, real x, real y)
/**设置特效坐标的Z值*/
@ifNotDefined public native EXSetEffectZ       (effect e, real z)
/**获取特效的大小*/
@ifNotDefined public native EXGetEffectSize    (effect e) returns real
/**设置特效的大小*/
@ifNotDefined public native EXSetEffectSize    (effect e, real size)
/**特效围绕X轴旋转*/
@ifNotDefined public native EXEffectMatRotateX (effect e, real angle)
/**特效围绕Y轴旋转*/
@ifNotDefined public native EXEffectMatRotateY (effect e, real angle)
/**特效围绕Z轴旋转*/
@ifNotDefined public native EXEffectMatRotateZ (effect e, real angle)
/**分别设置特效XYZ缩放*/
@ifNotDefined public native EXEffectMatScale   (effect e, real x, real y, real z)
/**重置特效为初始状态*/
@ifNotDefined public native EXEffectMatReset   (effect e)
/**设置特效动画速度*/
@ifNotDefined public native EXSetEffectSpeed   (effect e, real speed)



//——————————————————————constant——————————————————————
/** 技能冷却状态 */
public constant int ABILITY_STATE_COOLDOWN         = 1
/** 状态-目标允许 */
public constant int ABILITY_DATA_TARGS             = 100 // int
/** 状态-魔法施放时间 */
public constant int ABILITY_DATA_CAST              = 101 // real
/** 状态-持续时间-普通 */
public constant int ABILITY_DATA_DUR               = 102 // real
/** 状态-持续时间-英雄 */
public constant int ABILITY_DATA_HERODUR           = 103 // real
/** 状态-魔法消耗 */
public constant int ABILITY_DATA_COST              = 104 // int
/** 状态-魔法施放时间间隔 */
public constant int ABILITY_DATA_COOL              = 105 // real
/** 状态-影响区域 */
public constant int ABILITY_DATA_AREA              = 106 // real
/** 状态-施法距离 */
public constant int ABILITY_DATA_RNG               = 107 // real
/** 数据-DataA */
public constant int ABILITY_DATA_DATA_A            = 108 // real
/** 数据-DataB */
public constant int ABILITY_DATA_DATA_B            = 109 // real
/** 数据-DataC */
public constant int ABILITY_DATA_DATA_C            = 110 // real
/** 数据-DataD */
public constant int ABILITY_DATA_DATA_D            = 111 // real
/** 数据-DataE */
public constant int ABILITY_DATA_DATA_E            = 112 // real
/** 数据-DataF */
public constant int ABILITY_DATA_DATA_F            = 113 // real
/** 数据-DataG */
public constant int ABILITY_DATA_DATA_G            = 114 // real
/** 数据-DataH */
public constant int ABILITY_DATA_DATA_H            = 115 // real
/** 数据-DataI */
public constant int ABILITY_DATA_DATA_I            = 116 // real
/** 未知 */
public constant int ABILITY_DATA_UNITID            = 117 // int

/** 热键 */
public constant int ABILITY_DATA_HOTKET            = 200 // int
/** 热键-关闭 */
public constant int ABILITY_DATA_UNHOTKET          = 201 // int
/** 热键-学习 */
public constant int ABILITY_DATA_RESEARCH_HOTKEY   = 202 // int
/** 名称 */
public constant int ABILITY_DATA_NAME              = 203 // string
/** 图标 */
public constant int ABILITY_DATA_ART               = 204 // string
/** 效果-目标 */
public constant int ABILITY_DATA_TARGET_ART        = 205 // string
/** 效果-施法者 */
public constant int ABILITY_DATA_CASTER_ART        = 206 // string
/** 效果-目标点 */
public constant int ABILITY_DATA_EFFECT_ART        = 207 // string
/** 效果-区域 */
public constant int ABILITY_DATA_AREAEFFECT_ART    = 208 // string
/** 箭矢模型 */
public constant int ABILITY_DATA_MISSILE_ART       = 209 // string
/** 效果-特殊 */
public constant int ABILITY_DATA_SPECIAL_ART       = 210 // string
/** 效果-闪电效果 */
public constant int ABILITY_DATA_LIGHTNING_EFFECT  = 211 // string
/** 文本-工具提示 */
public constant int ABILITY_DATA_BUFF_TIP          = 212 // string
/** 文本-工具提示-拓展 */
public constant int ABILITY_DATA_BUFF_UBERTIP      = 213 // string
/** 学习技能提示 */
public constant int ABILITY_DATA_RESEARCH_TIP      = 214 // string
/** 描述标题 */
public constant int ABILITY_DATA_TIP               = 215 // string
/** 文本-提示工具-关闭 */
public constant int ABILITY_DATA_UNTIP             = 216 // string
/** 学习技能描述 */
public constant int ABILITY_DATA_RESEARCH_UBERTIP  = 217 // string
/** 说明 */
public constant int ABILITY_DATA_UBERTIP           = 218 // string
/** 文本-提示工具-关闭-拓展 */
public constant int ABILITY_DATA_UNUBERTIP         = 219 // string
/** 图标-关闭 */
public constant int ABILITY_DATA_UNART             = 220 // string

// original
/**攻击1-伤害骰子数量*/
public constant UNIT_STATE_ATTACK1_DAMAGE_DICE          = ConvertUnitState(0x10)
/**攻击1-伤害骰子面数*/
public constant UNIT_STATE_ATTACK1_DAMAGE_SIDE          = ConvertUnitState(0x11)
/**攻击1-基础伤害*/
public constant UNIT_STATE_ATTACK1_DAMAGE_BASE          = ConvertUnitState(0x12)
/**攻击1-附加伤害*/
public constant UNIT_STATE_ATTACK1_DAMAGE_BONUS         = ConvertUnitState(0x13)
/**攻击1-伤害最小值*/
public constant UNIT_STATE_ATTACK1_DAMAGE_MIN           = ConvertUnitState(0x14)
/**攻击1-伤害最大值*/
public constant UNIT_STATE_ATTACK1_DAMAGE_MAX           = ConvertUnitState(0x15)
/**攻击1-攻击范围*/
public constant UNIT_STATE_ATTACK1_RANGE                = ConvertUnitState(0x16)
/**基础护甲*/
public constant UNIT_STATE_ARMOR                        = ConvertUnitState(0x20)
// attack 1 attribute adds
/**攻击1-伤害衰减参数*/
public constant UNIT_STATE_ATTACK1_DAMAGE_LOSS_FACTOR   = ConvertUnitState(0x21)
/**攻击1-武器声音*/
public constant UNIT_STATE_ATTACK1_WEAPON_SOUND         = ConvertUnitState(0x22)
/**攻击1-攻击类型*/
public constant UNIT_STATE_ATTACK1_ATTACK_TYPE          = ConvertUnitState(0x23)
/**攻击1-最大目标数*/
public constant UNIT_STATE_ATTACK1_MAX_TARGETS          = ConvertUnitState(0x24)
/**攻击1-攻击间隔*/
public constant UNIT_STATE_ATTACK1_INTERVAL             = ConvertUnitState(0x25)
/**攻击1-动画伤害点*/
public constant UNIT_STATE_ATTACK1_INITIAL_DELAY        = ConvertUnitState(0x26)
/**攻击1-动画恢复点*/
public constant UNIT_STATE_ATTACK1_BACK_SWING           = ConvertUnitState(0x28)
/**攻击1-攻击范围缓冲*/
public constant UNIT_STATE_ATTACK1_RANGE_BUFFER         = ConvertUnitState(0x27)
/**攻击1-作为目标类型*/
public constant UNIT_STATE_ATTACK1_TARGET_TYPES         = ConvertUnitState(0x29)
/**攻击1-穿透伤害距离*/
public constant UNIT_STATE_ATTACK1_SPILL_DIST           = ConvertUnitState(0x56)
/**攻击1-穿透伤害范围*/
public constant UNIT_STATE_ATTACK1_SPILL_RADIUS         = ConvertUnitState(0x57)
/**攻击1-武器类型*/
public constant UNIT_STATE_ATTACK1_WEAPON_TYPE          = ConvertUnitState(0x58)
// attack 2 attributes (sorted in a sequencial order based on memory address)
/**攻击2-伤害骰子数量*/
public constant UNIT_STATE_ATTACK2_DAMAGE_DICE          = ConvertUnitState(0x30)
/**攻击2-伤害骰子面数*/
public constant UNIT_STATE_ATTACK2_DAMAGE_SIDE          = ConvertUnitState(0x31)
/**攻击2-基础伤害*/
public constant UNIT_STATE_ATTACK2_DAMAGE_BASE          = ConvertUnitState(0x32)
/**攻击2-附加伤害*/
public constant UNIT_STATE_ATTACK2_DAMAGE_BONUS         = ConvertUnitState(0x33)
/**攻击2-伤害衰减参数*/
public constant UNIT_STATE_ATTACK2_DAMAGE_LOSS_FACTOR   = ConvertUnitState(0x34)
/**攻击2-武器声音*/
public constant UNIT_STATE_ATTACK2_WEAPON_SOUND         = ConvertUnitState(0x35)
/**攻击2-攻击类型*/
public constant UNIT_STATE_ATTACK2_ATTACK_TYPE          = ConvertUnitState(0x36)
/**攻击2-最大目标数*/
public constant UNIT_STATE_ATTACK2_MAX_TARGETS          = ConvertUnitState(0x37)
/**攻击2-攻击间隔*/
public constant UNIT_STATE_ATTACK2_INTERVAL             = ConvertUnitState(0x38)
/**攻击2-动画伤害点*/
public constant UNIT_STATE_ATTACK2_INITIAL_DELAY        = ConvertUnitState(0x39)
/**攻击2-攻击范围*/
public constant UNIT_STATE_ATTACK2_RANGE                = ConvertUnitState(0x40)
/**攻击2-攻击范围缓冲*/
public constant UNIT_STATE_ATTACK2_RANGE_BUFFER         = ConvertUnitState(0x41)
/**攻击2-伤害最小值*/
public constant UNIT_STATE_ATTACK2_DAMAGE_MIN           = ConvertUnitState(0x42)
/**攻击2-伤害最大值*/
public constant UNIT_STATE_ATTACK2_DAMAGE_MAX           = ConvertUnitState(0x43)
/**攻击2-动画恢复点*/
public constant UNIT_STATE_ATTACK2_BACK_SWING           = ConvertUnitState(0x44)
/**攻击2-作为目标类型*/
public constant UNIT_STATE_ATTACK2_TARGET_TYPES         = ConvertUnitState(0x45)
/**攻击2-穿透伤害距离*/
public constant UNIT_STATE_ATTACK2_SPILL_DIST           = ConvertUnitState(0x46)
/**攻击2-穿透伤害范围*/
public constant UNIT_STATE_ATTACK2_SPILL_RADIUS         = ConvertUnitState(0x47)
/**攻击2-武器类型*/
public constant UNIT_STATE_ATTACK2_WEAPON_TYPE          = ConvertUnitState(0x59)
// general attributes
/**战斗-护甲类型*/
public constant UNIT_STATE_ARMOR_TYPE                   = ConvertUnitState(0x50)
/**战斗-攻击速度*/
public constant UNIT_STATE_RATE_OF_FIRE                 = ConvertUnitState(0x51) // global attack rate of unit, work on both attacks
/**战斗-主动攻击范围*/
public constant UNIT_STATE_ACQUISITION_RANGE            = ConvertUnitState(0x52) // how far the unit will automatically look for targets
/**状态-生命恢复*/
public constant UNIT_STATE_LIFE_REGEN                   = ConvertUnitState(0x53)
/**状态-魔法恢复*/
public constant UNIT_STATE_MANA_REGEN                   = ConvertUnitState(0x54)
/**状态-生命最大值*/
public constant UNIT_STATE_MAX_LIFE                     = ConvertUnitState(0x01)
/**状态-魔法最大值*/
public constant UNIT_STATE_MAX_MANA                     = ConvertUnitState(0x03)
/**战斗-最小攻击范围*/
public constant UNIT_STATE_MIN_RANGE                    = ConvertUnitState(0x55)
/**战斗-作为目标类型*/
public constant UNIT_STATE_AS_TARGET_TYPE               = ConvertUnitState(0x60)
/**状态-单位类别*/
public constant UNIT_STATE_TYPE                         = ConvertUnitState(0x61)
// ...starts from 0x62

/**物品-显示-界面图标*/
public constant ITEM_DATA_ART         = 1 // 图标
/**物品-文本-提示(基础)*/
public constant ITEM_DATA_TIP         = 2 // 提示
/**物品-文本-提示(拓展)*/
public constant ITEM_DATA_UBERTIP     = 3 // 提示(扩展)
/**物品-文本-名字*/
public constant ITEM_DATA_NAME        = 4 // 名字
/**物品-文本-说明*/
public constant ITEM_DATA_DESCRIPTION = 5 // 说明
/**伤害事件-是否开启*/
public constant int EVENT_DAMAGE_DATA_VAILD       = 0
/**伤害事件-物理伤害*/
public constant int EVENT_DAMAGE_DATA_IS_PHYSICAL = 1
/**伤害事件-攻击伤害*/
public constant int EVENT_DAMAGE_DATA_IS_ATTACK   = 2
/**伤害事件-范围伤害*/
public constant int EVENT_DAMAGE_DATA_IS_RANGED   = 3
/**伤害事件-伤害类型*/
public constant int EVENT_DAMAGE_DATA_DAMAGE_TYPE = 4
/**伤害事件-武器类型*/
public constant int EVENT_DAMAGE_DATA_WEAPON_TYPE = 5
/**伤害事件-攻击类型*/
public constant int EVENT_DAMAGE_DATA_ATTACK_TYPE = 6

/**聊天-[所有人]*/
public constant int CHAT_RECIPIENT_ALL       = 0        // [所有人]
/**聊天-[盟友]*/
public constant int CHAT_RECIPIENT_ALLIES    = 1        // [盟友]
/**聊天-[观看者]*/
public constant int CHAT_RECIPIENT_OBSERVERS = 2        // [观看者]
/**聊天-[裁判]*/
public constant int CHAT_RECIPIENT_REFEREES  = 2        // [裁判]
/**聊天-[私人的]*/
public constant int CHAT_RECIPIENT_PRIVATE   = 3        // [私人的]

