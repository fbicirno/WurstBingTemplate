package String
import NoWurst
import Integer
import Annotations

constant charset = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
constant numberset = "0123456789"
constant numbersetlength = numberset.length()
constant charsetlength = charset.length()

/** 检查字符串不为空 */
@deprecated("铺张浪费字节码，容易超出")
public function string.isNotBlank() returns boolean
	return this != null and this.trim().length() > 0

/** 返回字符在charset中的位置序号，0为0，a为10 */
@deprecated("铺张浪费字节码，容易超出")
public function string.toCharsetInt() returns int
	if this.length() > 1
		return -1
	else
		for i = 0 to charsetlength - 1
			if charset.substring(i, i + 1) == this
				return i
		return -1

/** 转换字符串为实数 */
public function string.toReal() returns real
	return S2R(this)

/** 转换字符串为整数 */
public function string.toInt() returns int
	return S2I(this)

/** 返回这个整数在字符串charset中的位置序号 */
public function int.toCharsetString() returns string
	return charset.substring(this, this + 1)

/** 返回指定开始和结束位置的字符串*/
public function string.substring(int start, int stop) returns string
	return SubString(this, start, stop)

/** 返回指定开始和字符串结尾位置的字符串 */
public function string.substring(int start) returns string
	return SubString(this, start, this.length())

/** 返回字符串长度 */
public function string.length() returns int
	return StringLength(this)

/** 返回指定位置的字符，0是第一个字符 */
public function string.charAt(int index) returns string
	return SubString(this, index, index + 1)

public function string.charAt(int index,int length) returns string
	return SubString(this, index, index + length)

/**	将技能字符转换为数字ID */
public function string.toAbilityId() returns int
	return AbilityId(this)

/**	检查字符串是否以指定字符结束 */
public function string.endsWith(string s) returns boolean
	if s == ""
		return true
	let len = this.length()
	if s.length() > len
		return false
	return this.substring(len - s.length(), len) == s

/**	检查字符串是否以指定字符开始 */
public function string.startsWith(string s) returns boolean
	let len = this.length()
	if s.length() > len
		return false
	return this.substring(0, s.length()) == s

/** 以小写字母返回字符串 */
public function string.toLowerCase() returns string
	return StringCase(this, false)

/** 以大写字母返回字符串 */
public function string.toUpperCase() returns string
	return StringCase(this, true)

/** 当字符串仅包含大写字母时返回True */
public function string.isUpper() returns boolean
	return this == StringCase(this, true)

/** 当字符串仅包含小写字母时为True */
public function string.isLower() returns boolean
	return this == StringCase(this, false)

/** 返回开始和结尾都删除空格的字符串 */
@deprecated("铺张浪费字节码，容易超出")
public function string.trim() returns string
	int i = 0
	int j = this.length()
	while (i != j and this.charAt(i) == " ")
		i++
	while (i != j and this.charAt(j - 1) == " ")
		j--
	return this.substring(i, j)

/** 返回开始删除空格的字符串 */
@deprecated("铺张浪费字节码，容易超出")
public function string.ltrim() returns string
	int i = 0
	let length = this.length()
	while (i < length and this.charAt(i) == " ")
		i++
	return this.substring(i, length)

/** 返回结尾删除空格的字符串 */
@deprecated("铺张浪费字节码，容易超出")
public function string.rtrim() returns string
	int j = this.length()
	while (j != 0 and this.charAt(j - 1) == " ")
		j--
	return this.substring(0, j)

/** 返回开头删除指定字符的字符串 */
public function string.ltrim(string val) returns string
	if this.startsWith(val)
		return this.substring(val.length(), this.length()).ltrim(val)
	else
		return this

/** 返回结尾删除指定字符的字符串 */
public function string.rtrim(string val) returns string
	if this.endsWith(val)
		return this.substring(0, this.length() - val.length()).rtrim(val)
	else
		return this

/** 返回开头和结尾都删除指定字符的字符串 */
public function string.trim(string val) returns string
	return this.ltrim(val).rtrim(val)

/**
返回字符串中指定字符的位置序号，如果字符串不存在，则返回-1
*/
@deprecated("铺张浪费字节码，容易超出")
public function string.indexOf(string s) returns int
	for int i = 0 to this.length() - s.length()
		if this.substring(i, i + s.length()) == s
			return i
	return -1

/**
在指定位置开始索引，返回字符串中指定字符的位置序号。如果字符串不存在，则返回-1
*/
@deprecated("铺张浪费字节码，容易超出")
public function string.indexOf(string s, int startpos) returns int
	for int i = startpos to this.length() - s.length()
		if this.substring(i, i + s.length()) == s
			return i
	return -1

/**
返回字符串中指定字符串的最后一个索引，如果字符串不存在，则返回值为-1 
*/
@deprecated("铺张浪费字节码，容易超出")
public function string.lastIndexOf(string s) returns int
	for int i = this.length() - s.length() downto 0
		if this.substring(i, i + s.length()) == s
			return i
	return -1

/** 返回字符串中某个字符串的出现次数 */
@deprecated("铺张浪费字节码，容易超出")
public function string.countOccurences(string findStr) returns int
	int lastIndex = 0
	int count = 0
	while lastIndex != -1
		lastIndex = this.indexOf(findStr, lastIndex)

		if lastIndex != -1
			count++
			lastIndex += findStr.length()
	return count

/** 如果字符串包含指定字符串，返回True */
@deprecated("铺张浪费字节码，容易超出")
public function string.contains(string s) returns boolean
	return this.indexOf(s) != -1

/** 如果指定字符串是 (" ",\n,\t,\r)，返回True */
public function string.isWhitespace() returns boolean
	return this == " " or this == "\n" or this == "\t" or this == "\r"

/** 把字符串的首字母大写并返回 */
public function string.firstUpper() returns string
	if this == ""
		return ""
	return StringCase(this.substring(0, 1), true) + this.substring(1, this.length())

/** 把字符串的首字母小写并返回 */
public function string.firstLower() returns string
	if this == ""
		return ""
	return StringCase(this.substring(0, 1), false) + this.substring(1, this.length())

/** 将字符串中指定字符/串替换为别的字符/串，如果不完全匹配，则返回原字符串 */
@deprecated("铺张浪费字节码，容易超出")
public function string.replace(string oldSubstring, string newSubstring) returns string
	var s = this
	if oldSubstring.length() > 0
		int i = this.indexOf(oldSubstring)
		while (i != -1)
			s = s.substring(0, i) + newSubstring + s.substring(i + oldSubstring.length(), s.length())
			i = s.indexOf(oldSubstring, i + newSubstring.length())
	return s

public function string.getHash() returns int
	return StringHash(this)

/** 使用占位符格式化字符串，eg."te{0}{0}".format("s", "t").assertEquals("tess") */
@deprecated("铺张浪费字节码，容易超出")
public function string.format(vararg string replacements) returns string
	var result = this
	var i = 0
	for replacement in replacements
		result = result.replace("{" + i.toString() + "}", replacement)
		i++
	return result

/** 字符串迭代器，实现了字符串for in功能 */
public function string.iterator() returns StringIterator
	return new StringIterator(this, 0, this.length())

public class StringIterator
	string s
	int currentpos
	int stringLen

	construct(string s, int currentpos, int stringLen)
		this.s = s
		this.currentpos = currentpos
		this.stringLen = stringLen

	function hasNext() returns boolean
		return currentpos < stringLen

	function next() returns string
		let val = s.substring(currentpos, currentpos + 1)
		currentpos++
		return val

	function close()
		destroy this

public class StringLines
	string s
	int currentLine = 0
	int lineCount
	int lastIndex

	construct(string s, int lastIndex, int lineCount)
		this.s = s
		this.lineCount = lineCount
		this.lastIndex = lastIndex

	function iterator() returns thistype
		return this

	function hasNext() returns boolean
		return currentLine < lineCount

	function next() returns string
		let idx = this.lastIndex
		this.lastIndex = this.s.indexOf("\n", idx) + 1
		currentLine++
		return this.s.substring(idx, this.lastIndex)

	function close()
		destroy this


/** 返回指定字符串的StringLines对象以进行迭代 */
public function string.toLines() returns StringLines
	return new StringLines(this, 0, this.countOccurences("\n") + 1)
