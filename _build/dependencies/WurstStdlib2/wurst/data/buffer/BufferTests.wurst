package BufferTests
import Buffer
import LinkedList

class SerializableElement implements BufferSerializable
	int id
	int value

	construct()

	construct(Buffer buffer)
		deserialize(buffer)

	override function serialize(Buffer buffer)
		buffer.writeInt(id)
		buffer.writeInt(value)

	override function deserialize(Buffer buffer)
		id = buffer.readInt()
		value = buffer.readInt()

class TestSerializable implements BufferSerializable
	var name = "SomeName"
	var id = 0
	var facing = 3.14
	var elements = new LinkedList<SerializableElement>

	construct()

	construct(Buffer buffer)
		deserialize(buffer)

	override function serialize(Buffer buffer)
		buffer.writeString(name)
		buffer.writeInt(id)
		buffer.writeReal(facing)
		buffer.writeInt(elements.size())

		for element in elements
			buffer.write(element)

	override function deserialize(Buffer buffer)
		name = buffer.readString()
		id = buffer.readInt()
		facing = buffer.readReal()
		let size = buffer.readInt()

		for i = 0 to size - 1
			elements.add(new SerializableElement(buffer))

@test
function stringBufferEmptyStringTest()
	let sBuffer = new OrderedStringBuffer(4)
	let buffer = sBuffer

	buffer.writeInt(1)
	buffer.writeInt(2)
	buffer.writeString("")
	sBuffer.flush()

	buffer.readInt().assertEquals(1)
	buffer.readInt().assertEquals(2)
	buffer.readString().assertEquals("")

@test
function stringBufferShortSerializationTest()
	let sBuffer = new OrderedStringBuffer(4)
	let buffer = sBuffer

	buffer.writeInt(1)
	buffer.writeInt(2)
	buffer.writeReal(3.14)
	buffer.writeInt(3)
	buffer.writeBoolean(true)
	buffer.writeBoolean(false)
	buffer.writeString("a b c d e f g h lol")
	sBuffer.flush()

	buffer.readInt().assertEquals(1)
	buffer.readInt().assertEquals(2)
	buffer.readReal().assertEquals(3.14)
	buffer.readInt().assertEquals(3)
	buffer.readBoolean().assertEquals(true)
	buffer.readBoolean().assertEquals(false)
	buffer.readString().assertEquals("a b c d e f g h lol")

@test
function stringBufferLongSerializationTest()
	let buffer = new OrderedStringBuffer(256)

	for i = 0 to 127
		buffer.writeInt(i)
		buffer.writeReal(i + 0.125)
		buffer.writeBoolean(i div 2 == 0)
		buffer.writeString(i.toString())

	buffer.flush()

	for i = 0 to 127
		buffer.readInt().assertEquals(i)
		buffer.readReal().assertEquals(i + 0.125)
		buffer.readBoolean().assertEquals(i div 2 == 0)
		buffer.readString().assertEquals(i.toString())

@test
function stringBufferSerializableTest()
	let original = new TestSerializable()

	original.name = "NewName"
	original.id = 100
	original.facing = 1.125

	for i = 0 to 5
		let element = new SerializableElement()
		element.id = i
		element.value = i
		original.elements.add(element)

	let buffer = new OrderedStringBuffer(16)
	buffer.write(original)
	buffer.flush()

	let copy = new TestSerializable(buffer)

	copy.id.assertEquals(original.id)
	copy.name.assertEquals(original.name)
	copy.elements.get(2).value.assertEquals(original.elements.get(2).value)

@test
function hashBufferTestSerialization()
	let buffer = new HashBuffer()

	buffer.writeInt(1)
	buffer.writeReal(3.14)
	buffer.writeBoolean(true)
	buffer.writeString("abc")

	buffer.readInt().assertEquals(1)
	buffer.readReal().assertEquals(3.14)
	buffer.readBoolean().assertEquals(true)
	buffer.readString().assertEquals("abc")

